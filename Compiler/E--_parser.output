Terminals unused in grammar

   TOK_LEX_ERROR
   TOK_PAT_NOT
   TOK_UMINUS
   TOK_RBRACK
   TOK_QMARK
   TOK_LONG
   TOK_BIT
   TOK_ENUM
   TOK_PRINT
   TOK_SHORT
   TOK_DOUBLE_COLON
   TOK_LBRACK
   TOK_DOT


State 46 conflicts: 1 shift/reduce
State 82 conflicts: 1 shift/reduce
State 152 conflicts: 1 shift/reduce


Grammar

    0 $accept: specification $end

    1 specification: decl_star rule_plus

    2 decl_star: /* empty */
    3          | decl_star decl

    4 rule_plus: rule
    5          | rule_plus rule

    6 decl: class_decl TOK_SEMICOLON
    7     | class_decl TOK_SEMICOLON TOK_SEMICOLON
    8     | func_decl TOK_SEMICOLON
    9     | event_decl TOK_SEMICOLON
   10     | var_decl

   11 class_decl: TOK_CLASS TOK_IDENT

   12 func_decl: function_identifier TOK_LPAREN form_param_maybe_list TOK_RPAREN func_maybe_body

   13 function_identifier: type TOK_IDENT

   14 func_maybe_body: /* empty */
   15                | func_body

   16 func_body: TOK_LBRACE var_decl_star statement_plus TOK_RBRACE

   17 statement_plus: statement
   18               | statement_plus statement

   19 var_decl_star: /* empty */
   20              | var_decl_star var_decl

   21 var_decl: var_decl1 TOK_SEMICOLON
   22         | var_decl1 TOK_SEMICOLON TOK_SEMICOLON

   23 var_decl1: type TOK_IDENT var_pos_assignment
   24          | var_decl1 TOK_COMMA TOK_IDENT var_pos_assignment

   25 var_pos_assignment: /* empty */
   26                   | TOK_ASSIGN expr

   27 event_decl: event_header TOK_LPAREN form_param_maybe_list TOK_RPAREN

   28 event_header: TOK_EVENT TOK_IDENT

   29 rule: event_pattern TOK_ARROW statement

   30 event_pattern: prim_pattern
   31              | TOK_NOT event_pattern
   32              | event_pattern TOK_PAT_STAR
   33              | event_pattern TOK_COLON event_pattern
   34              | event_pattern TOK_PAT_OR event_pattern
   35              | TOK_LPAREN event_pattern TOK_RPAREN

   36 prim_pattern: event_and_args
   37             | event_and_args TOK_BITOR expr

   38 event_and_args: TOK_IDENT TOK_LPAREN event_param_maybe_list TOK_RPAREN
   39               | TOK_ANY

   40 event_param_maybe_list: /* empty */
   41                       | event_param_list

   42 event_param_list: TOK_IDENT
   43                 | event_param_list TOK_COMMA TOK_IDENT

   44 statement: if_statement
   45          | empty_statement TOK_SEMICOLON
   46          | func_invocation TOK_SEMICOLON
   47          | assignment TOK_SEMICOLON
   48          | return_statement TOK_SEMICOLON
   49          | comp_statement
   50          | comp_statement TOK_SEMICOLON
   51          | while_statement
   52          | break_statement TOK_SEMICOLON

   53 if_statement: TOK_IF expr statement
   54             | TOK_IF expr statement TOK_ELSE statement

   55 empty_statement: /* empty */

   56 return_statement: TOK_RETURN expr

   57 while_statement: TOK_WHILE expr comp_statement

   58 break_statement: TOK_BREAK TOK_UINTNUM
   59                | TOK_BREAK

   60 comp_statement: enter_compound_statement statement_plus leave_compound_statement

   61 enter_compound_statement: TOK_LBRACE

   62 leave_compound_statement: TOK_RBRACE

   63 form_param_maybe_list: /* empty */
   64                      | form_param_list

   65 form_param_list: form_param
   66                | form_param_list TOK_COMMA form_param

   67 form_param: type TOK_IDENT

   68 type: base_type
   69     | type_name

   70 type_name: TOK_IDENT

   71 base_type: TOK_UNSIGNED btype
   72          | btype

   73 btype: TOK_VOID
   74      | TOK_BOOL
   75      | TOK_STRING
   76      | TOK_BYTE
   77      | TOK_INT
   78      | TOK_DOUBLE

   79 expr: literal
   80     | ref_expr
   81     | assignment
   82     | func_invocation
   83     | TOK_MINUS expr
   84     | expr TOK_PLUS expr
   85     | expr TOK_MINUS expr
   86     | expr TOK_MULT expr
   87     | expr TOK_DIV expr
   88     | expr TOK_MOD expr
   89     | TOK_BITNOT expr
   90     | expr TOK_BITAND expr
   91     | expr TOK_BITOR expr
   92     | expr TOK_BITXOR expr
   93     | expr TOK_SHR expr
   94     | expr TOK_SHL expr
   95     | expr TOK_GT expr
   96     | expr TOK_LT expr
   97     | expr TOK_GE expr
   98     | expr TOK_LE expr
   99     | expr TOK_EQ expr
  100     | expr TOK_NE expr
  101     | expr TOK_AND expr
  102     | expr TOK_OR expr
  103     | TOK_NOT expr
  104     | TOK_LPAREN expr TOK_RPAREN

  105 literal: TOK_UINTNUM
  106        | TOK_DOUBLENUM
  107        | TOK_TRUE
  108        | TOK_FALSE
  109        | TOK_STRCONST

  110 ref_expr: TOK_IDENT

  111 assignment: ref_expr TOK_ASSIGN expr

  112 func_invocation: TOK_IDENT TOK_LPAREN expr_maybe_list TOK_RPAREN

  113 expr_maybe_list: /* empty */
  114                | expr_list

  115 expr_list: expr
  116          | expr_list TOK_COMMA expr


Terminals, with rules where they appear

$end (0) 0
error (256)
TOK_LEX_ERROR (258)
TOK_PAT_STAR (259) 32
TOK_PAT_OR (260) 34
TOK_PAT_NOT (261)
TOK_PLUS (262) 84
TOK_MINUS (263) 83 85
TOK_UMINUS (264)
TOK_MULT (265) 86
TOK_DIV (266) 87
TOK_MOD (267) 88
TOK_BITAND (268) 90
TOK_BITOR (269) 37 91
TOK_BITNOT (270) 89
TOK_BITXOR (271) 92
TOK_SHL (272) 94
TOK_SHR (273) 93
TOK_GT (274) 95
TOK_LT (275) 96
TOK_GE (276) 97
TOK_LE (277) 98
TOK_EQ (278) 99
TOK_NE (279) 100
TOK_AND (280) 101
TOK_OR (281) 102
TOK_NOT (282) 31 103
TOK_COMMA (283) 24 43 66 116
TOK_ASSIGN (284) 26 111
TOK_SEMICOLON (285) 6 7 8 9 21 22 45 46 47 48 50 52
TOK_COLON (286) 33
TOK_ARROW (287) 29
TOK_LBRACE (288) 16 61
TOK_RBRACE (289) 16 62
TOK_LPAREN (290) 12 27 35 38 104 112
TOK_RPAREN (291) 12 27 35 38 104 112
TOK_RBRACK (292)
TOK_QMARK (293)
TOK_LONG (294)
TOK_BIT (295)
TOK_ENUM (296)
TOK_IF (297) 53 54
TOK_ELSE (298) 54
TOK_CLASS (299) 11
TOK_RETURN (300) 56
TOK_EVENT (301) 28
TOK_ANY (302) 39
TOK_PRINT (303)
TOK_UINTNUM (304) 58 105
TOK_DOUBLENUM (305) 106
TOK_VOID (306) 73
TOK_STRING (307) 75
TOK_STRCONST (308) 109
TOK_INT (309) 77
TOK_UNSIGNED (310) 71
TOK_BOOL (311) 74
TOK_BYTE (312) 76
TOK_DOUBLE (313) 78
TOK_SHORT (314)
TOK_TRUE (315) 107
TOK_FALSE (316) 108
TOK_IDENT (317) 11 13 23 24 28 38 42 43 67 70 110 112
TOK_WHILE (318) 57
TOK_BREAK (319) 58 59
TOK_DOUBLE_COLON (320)
TOK_LBRACK (321)
TOK_DOT (322)


Nonterminals, with rules where they appear

$accept (68)
    on left: 0
specification (69)
    on left: 1, on right: 0
decl_star (70)
    on left: 2 3, on right: 1 3
rule_plus (71)
    on left: 4 5, on right: 1 5
decl (72)
    on left: 6 7 8 9 10, on right: 3
class_decl (73)
    on left: 11, on right: 6 7
func_decl (74)
    on left: 12, on right: 8
function_identifier (75)
    on left: 13, on right: 12
func_maybe_body (76)
    on left: 14 15, on right: 12
func_body (77)
    on left: 16, on right: 15
statement_plus (78)
    on left: 17 18, on right: 16 18 60
var_decl_star (79)
    on left: 19 20, on right: 16 20
var_decl (80)
    on left: 21 22, on right: 10 20
var_decl1 (81)
    on left: 23 24, on right: 21 22 24
var_pos_assignment (82)
    on left: 25 26, on right: 23 24
event_decl (83)
    on left: 27, on right: 9
event_header (84)
    on left: 28, on right: 27
rule (85)
    on left: 29, on right: 4 5
event_pattern (86)
    on left: 30 31 32 33 34 35, on right: 29 31 32 33 34 35
prim_pattern (87)
    on left: 36 37, on right: 30
event_and_args (88)
    on left: 38 39, on right: 36 37
event_param_maybe_list (89)
    on left: 40 41, on right: 38
event_param_list (90)
    on left: 42 43, on right: 41 43
statement (91)
    on left: 44 45 46 47 48 49 50 51 52, on right: 17 18 29 53 54
if_statement (92)
    on left: 53 54, on right: 44
empty_statement (93)
    on left: 55, on right: 45
return_statement (94)
    on left: 56, on right: 48
while_statement (95)
    on left: 57, on right: 51
break_statement (96)
    on left: 58 59, on right: 52
comp_statement (97)
    on left: 60, on right: 49 50 57
enter_compound_statement (98)
    on left: 61, on right: 60
leave_compound_statement (99)
    on left: 62, on right: 60
form_param_maybe_list (100)
    on left: 63 64, on right: 12 27
form_param_list (101)
    on left: 65 66, on right: 64 66
form_param (102)
    on left: 67, on right: 65 66
type (103)
    on left: 68 69, on right: 13 23 67
type_name (104)
    on left: 70, on right: 69
base_type (105)
    on left: 71 72, on right: 68
btype (106)
    on left: 73 74 75 76 77 78, on right: 71 72
expr (107)
    on left: 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96
    97 98 99 100 101 102 103 104, on right: 26 37 53 54 56 57 83 84
    85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104
    111 115 116
literal (108)
    on left: 105 106 107 108 109, on right: 79
ref_expr (109)
    on left: 110, on right: 80 111
assignment (110)
    on left: 111, on right: 47 81
func_invocation (111)
    on left: 112, on right: 46 82
expr_maybe_list (112)
    on left: 113 114, on right: 112
expr_list (113)
    on left: 115 116, on right: 114 116


state 0

    0 $accept: . specification $end

    $default  reduce using rule 2 (decl_star)

    specification  go to state 1
    decl_star      go to state 2


state 1

    0 $accept: specification . $end

    $end  shift, and go to state 3


state 2

    1 specification: decl_star . rule_plus
    3 decl_star: decl_star . decl

    TOK_NOT       shift, and go to state 4
    TOK_LPAREN    shift, and go to state 5
    TOK_CLASS     shift, and go to state 6
    TOK_EVENT     shift, and go to state 7
    TOK_ANY       shift, and go to state 8
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 16

    rule_plus            go to state 17
    decl                 go to state 18
    class_decl           go to state 19
    func_decl            go to state 20
    function_identifier  go to state 21
    var_decl             go to state 22
    var_decl1            go to state 23
    event_decl           go to state 24
    event_header         go to state 25
    rule                 go to state 26
    event_pattern        go to state 27
    prim_pattern         go to state 28
    event_and_args       go to state 29
    type                 go to state 30
    type_name            go to state 31
    base_type            go to state 32
    btype                go to state 33


state 3

    0 $accept: specification $end .

    $default  accept


state 4

   31 event_pattern: TOK_NOT . event_pattern

    TOK_NOT     shift, and go to state 4
    TOK_LPAREN  shift, and go to state 5
    TOK_ANY     shift, and go to state 8
    TOK_IDENT   shift, and go to state 34

    event_pattern   go to state 35
    prim_pattern    go to state 28
    event_and_args  go to state 29


state 5

   35 event_pattern: TOK_LPAREN . event_pattern TOK_RPAREN

    TOK_NOT     shift, and go to state 4
    TOK_LPAREN  shift, and go to state 5
    TOK_ANY     shift, and go to state 8
    TOK_IDENT   shift, and go to state 34

    event_pattern   go to state 36
    prim_pattern    go to state 28
    event_and_args  go to state 29


state 6

   11 class_decl: TOK_CLASS . TOK_IDENT

    TOK_IDENT  shift, and go to state 37


state 7

   28 event_header: TOK_EVENT . TOK_IDENT

    TOK_IDENT  shift, and go to state 38


state 8

   39 event_and_args: TOK_ANY .

    $default  reduce using rule 39 (event_and_args)


state 9

   73 btype: TOK_VOID .

    $default  reduce using rule 73 (btype)


state 10

   75 btype: TOK_STRING .

    $default  reduce using rule 75 (btype)


state 11

   77 btype: TOK_INT .

    $default  reduce using rule 77 (btype)


state 12

   71 base_type: TOK_UNSIGNED . btype

    TOK_VOID    shift, and go to state 9
    TOK_STRING  shift, and go to state 10
    TOK_INT     shift, and go to state 11
    TOK_BOOL    shift, and go to state 13
    TOK_BYTE    shift, and go to state 14
    TOK_DOUBLE  shift, and go to state 15

    btype  go to state 39


state 13

   74 btype: TOK_BOOL .

    $default  reduce using rule 74 (btype)


state 14

   76 btype: TOK_BYTE .

    $default  reduce using rule 76 (btype)


state 15

   78 btype: TOK_DOUBLE .

    $default  reduce using rule 78 (btype)


state 16

   38 event_and_args: TOK_IDENT . TOK_LPAREN event_param_maybe_list TOK_RPAREN
   70 type_name: TOK_IDENT .

    TOK_LPAREN  shift, and go to state 40

    $default  reduce using rule 70 (type_name)


state 17

    1 specification: decl_star rule_plus .
    5 rule_plus: rule_plus . rule

    TOK_NOT     shift, and go to state 4
    TOK_LPAREN  shift, and go to state 5
    TOK_ANY     shift, and go to state 8
    TOK_IDENT   shift, and go to state 34

    $default  reduce using rule 1 (specification)

    rule            go to state 41
    event_pattern   go to state 27
    prim_pattern    go to state 28
    event_and_args  go to state 29


state 18

    3 decl_star: decl_star decl .

    $default  reduce using rule 3 (decl_star)


state 19

    6 decl: class_decl . TOK_SEMICOLON
    7     | class_decl . TOK_SEMICOLON TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 42


state 20

    8 decl: func_decl . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 43


state 21

   12 func_decl: function_identifier . TOK_LPAREN form_param_maybe_list TOK_RPAREN func_maybe_body

    TOK_LPAREN  shift, and go to state 44


state 22

   10 decl: var_decl .

    $default  reduce using rule 10 (decl)


state 23

   21 var_decl: var_decl1 . TOK_SEMICOLON
   22         | var_decl1 . TOK_SEMICOLON TOK_SEMICOLON
   24 var_decl1: var_decl1 . TOK_COMMA TOK_IDENT var_pos_assignment

    TOK_COMMA      shift, and go to state 45
    TOK_SEMICOLON  shift, and go to state 46


state 24

    9 decl: event_decl . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 47


state 25

   27 event_decl: event_header . TOK_LPAREN form_param_maybe_list TOK_RPAREN

    TOK_LPAREN  shift, and go to state 48


state 26

    4 rule_plus: rule .

    $default  reduce using rule 4 (rule_plus)


state 27

   29 rule: event_pattern . TOK_ARROW statement
   32 event_pattern: event_pattern . TOK_PAT_STAR
   33              | event_pattern . TOK_COLON event_pattern
   34              | event_pattern . TOK_PAT_OR event_pattern

    TOK_PAT_STAR  shift, and go to state 49
    TOK_PAT_OR    shift, and go to state 50
    TOK_COLON     shift, and go to state 51
    TOK_ARROW     shift, and go to state 52


state 28

   30 event_pattern: prim_pattern .

    $default  reduce using rule 30 (event_pattern)


state 29

   36 prim_pattern: event_and_args .
   37             | event_and_args . TOK_BITOR expr

    TOK_BITOR  shift, and go to state 53

    $default  reduce using rule 36 (prim_pattern)


state 30

   13 function_identifier: type . TOK_IDENT
   23 var_decl1: type . TOK_IDENT var_pos_assignment

    TOK_IDENT  shift, and go to state 54


state 31

   69 type: type_name .

    $default  reduce using rule 69 (type)


state 32

   68 type: base_type .

    $default  reduce using rule 68 (type)


state 33

   72 base_type: btype .

    $default  reduce using rule 72 (base_type)


state 34

   38 event_and_args: TOK_IDENT . TOK_LPAREN event_param_maybe_list TOK_RPAREN

    TOK_LPAREN  shift, and go to state 40


state 35

   31 event_pattern: TOK_NOT event_pattern .
   32              | event_pattern . TOK_PAT_STAR
   33              | event_pattern . TOK_COLON event_pattern
   34              | event_pattern . TOK_PAT_OR event_pattern

    $default  reduce using rule 31 (event_pattern)


state 36

   32 event_pattern: event_pattern . TOK_PAT_STAR
   33              | event_pattern . TOK_COLON event_pattern
   34              | event_pattern . TOK_PAT_OR event_pattern
   35              | TOK_LPAREN event_pattern . TOK_RPAREN

    TOK_PAT_STAR  shift, and go to state 49
    TOK_PAT_OR    shift, and go to state 50
    TOK_COLON     shift, and go to state 51
    TOK_RPAREN    shift, and go to state 55


state 37

   11 class_decl: TOK_CLASS TOK_IDENT .

    $default  reduce using rule 11 (class_decl)


state 38

   28 event_header: TOK_EVENT TOK_IDENT .

    $default  reduce using rule 28 (event_header)


state 39

   71 base_type: TOK_UNSIGNED btype .

    $default  reduce using rule 71 (base_type)


state 40

   38 event_and_args: TOK_IDENT TOK_LPAREN . event_param_maybe_list TOK_RPAREN

    TOK_IDENT  shift, and go to state 56

    $default  reduce using rule 40 (event_param_maybe_list)

    event_param_maybe_list  go to state 57
    event_param_list        go to state 58


state 41

    5 rule_plus: rule_plus rule .

    $default  reduce using rule 5 (rule_plus)


state 42

    6 decl: class_decl TOK_SEMICOLON .
    7     | class_decl TOK_SEMICOLON . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 59

    $default  reduce using rule 6 (decl)


state 43

    8 decl: func_decl TOK_SEMICOLON .

    $default  reduce using rule 8 (decl)


state 44

   12 func_decl: function_identifier TOK_LPAREN . form_param_maybe_list TOK_RPAREN func_maybe_body

    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 60

    $default  reduce using rule 63 (form_param_maybe_list)

    form_param_maybe_list  go to state 61
    form_param_list        go to state 62
    form_param             go to state 63
    type                   go to state 64
    type_name              go to state 31
    base_type              go to state 32
    btype                  go to state 33


state 45

   24 var_decl1: var_decl1 TOK_COMMA . TOK_IDENT var_pos_assignment

    TOK_IDENT  shift, and go to state 65


state 46

   21 var_decl: var_decl1 TOK_SEMICOLON .
   22         | var_decl1 TOK_SEMICOLON . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 66

    TOK_SEMICOLON  [reduce using rule 21 (var_decl)]
    $default       reduce using rule 21 (var_decl)


state 47

    9 decl: event_decl TOK_SEMICOLON .

    $default  reduce using rule 9 (decl)


state 48

   27 event_decl: event_header TOK_LPAREN . form_param_maybe_list TOK_RPAREN

    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 60

    $default  reduce using rule 63 (form_param_maybe_list)

    form_param_maybe_list  go to state 67
    form_param_list        go to state 62
    form_param             go to state 63
    type                   go to state 64
    type_name              go to state 31
    base_type              go to state 32
    btype                  go to state 33


state 49

   32 event_pattern: event_pattern TOK_PAT_STAR .

    $default  reduce using rule 32 (event_pattern)


state 50

   34 event_pattern: event_pattern TOK_PAT_OR . event_pattern

    TOK_NOT     shift, and go to state 4
    TOK_LPAREN  shift, and go to state 5
    TOK_ANY     shift, and go to state 8
    TOK_IDENT   shift, and go to state 34

    event_pattern   go to state 68
    prim_pattern    go to state 28
    event_and_args  go to state 29


state 51

   33 event_pattern: event_pattern TOK_COLON . event_pattern

    TOK_NOT     shift, and go to state 4
    TOK_LPAREN  shift, and go to state 5
    TOK_ANY     shift, and go to state 8
    TOK_IDENT   shift, and go to state 34

    event_pattern   go to state 69
    prim_pattern    go to state 28
    event_and_args  go to state 29


state 52

   29 rule: event_pattern TOK_ARROW . statement

    TOK_LBRACE  shift, and go to state 70
    TOK_IF      shift, and go to state 71
    TOK_RETURN  shift, and go to state 72
    TOK_IDENT   shift, and go to state 73
    TOK_WHILE   shift, and go to state 74
    TOK_BREAK   shift, and go to state 75

    $default  reduce using rule 55 (empty_statement)

    statement                 go to state 76
    if_statement              go to state 77
    empty_statement           go to state 78
    return_statement          go to state 79
    while_statement           go to state 80
    break_statement           go to state 81
    comp_statement            go to state 82
    enter_compound_statement  go to state 83
    ref_expr                  go to state 84
    assignment                go to state 85
    func_invocation           go to state 86


state 53

   37 prim_pattern: event_and_args TOK_BITOR . expr

    TOK_MINUS      shift, and go to state 87
    TOK_BITNOT     shift, and go to state 88
    TOK_NOT        shift, and go to state 89
    TOK_LPAREN     shift, and go to state 90
    TOK_UINTNUM    shift, and go to state 91
    TOK_DOUBLENUM  shift, and go to state 92
    TOK_STRCONST   shift, and go to state 93
    TOK_TRUE       shift, and go to state 94
    TOK_FALSE      shift, and go to state 95
    TOK_IDENT      shift, and go to state 73

    expr             go to state 96
    literal          go to state 97
    ref_expr         go to state 98
    assignment       go to state 99
    func_invocation  go to state 100


state 54

   13 function_identifier: type TOK_IDENT .
   23 var_decl1: type TOK_IDENT . var_pos_assignment

    TOK_ASSIGN  shift, and go to state 101

    TOK_LPAREN  reduce using rule 13 (function_identifier)
    $default    reduce using rule 25 (var_pos_assignment)

    var_pos_assignment  go to state 102


state 55

   35 event_pattern: TOK_LPAREN event_pattern TOK_RPAREN .

    $default  reduce using rule 35 (event_pattern)


state 56

   42 event_param_list: TOK_IDENT .

    $default  reduce using rule 42 (event_param_list)


state 57

   38 event_and_args: TOK_IDENT TOK_LPAREN event_param_maybe_list . TOK_RPAREN

    TOK_RPAREN  shift, and go to state 103


state 58

   41 event_param_maybe_list: event_param_list .
   43 event_param_list: event_param_list . TOK_COMMA TOK_IDENT

    TOK_COMMA  shift, and go to state 104

    $default  reduce using rule 41 (event_param_maybe_list)


state 59

    7 decl: class_decl TOK_SEMICOLON TOK_SEMICOLON .

    $default  reduce using rule 7 (decl)


state 60

   70 type_name: TOK_IDENT .

    $default  reduce using rule 70 (type_name)


state 61

   12 func_decl: function_identifier TOK_LPAREN form_param_maybe_list . TOK_RPAREN func_maybe_body

    TOK_RPAREN  shift, and go to state 105


state 62

   64 form_param_maybe_list: form_param_list .
   66 form_param_list: form_param_list . TOK_COMMA form_param

    TOK_COMMA  shift, and go to state 106

    $default  reduce using rule 64 (form_param_maybe_list)


state 63

   65 form_param_list: form_param .

    $default  reduce using rule 65 (form_param_list)


state 64

   67 form_param: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 107


state 65

   24 var_decl1: var_decl1 TOK_COMMA TOK_IDENT . var_pos_assignment

    TOK_ASSIGN  shift, and go to state 101

    $default  reduce using rule 25 (var_pos_assignment)

    var_pos_assignment  go to state 108


state 66

   22 var_decl: var_decl1 TOK_SEMICOLON TOK_SEMICOLON .

    $default  reduce using rule 22 (var_decl)


state 67

   27 event_decl: event_header TOK_LPAREN form_param_maybe_list . TOK_RPAREN

    TOK_RPAREN  shift, and go to state 109


state 68

   32 event_pattern: event_pattern . TOK_PAT_STAR
   33              | event_pattern . TOK_COLON event_pattern
   34              | event_pattern . TOK_PAT_OR event_pattern
   34              | event_pattern TOK_PAT_OR event_pattern .

    TOK_PAT_STAR  shift, and go to state 49
    TOK_COLON     shift, and go to state 51

    $default  reduce using rule 34 (event_pattern)


state 69

   32 event_pattern: event_pattern . TOK_PAT_STAR
   33              | event_pattern . TOK_COLON event_pattern
   33              | event_pattern TOK_COLON event_pattern .
   34              | event_pattern . TOK_PAT_OR event_pattern

    TOK_PAT_STAR  shift, and go to state 49

    $default  reduce using rule 33 (event_pattern)


state 70

   61 enter_compound_statement: TOK_LBRACE .

    $default  reduce using rule 61 (enter_compound_statement)


state 71

   53 if_statement: TOK_IF . expr statement
   54             | TOK_IF . expr statement TOK_ELSE statement

    TOK_MINUS      shift, and go to state 87
    TOK_BITNOT     shift, and go to state 88
    TOK_NOT        shift, and go to state 89
    TOK_LPAREN     shift, and go to state 90
    TOK_UINTNUM    shift, and go to state 91
    TOK_DOUBLENUM  shift, and go to state 92
    TOK_STRCONST   shift, and go to state 93
    TOK_TRUE       shift, and go to state 94
    TOK_FALSE      shift, and go to state 95
    TOK_IDENT      shift, and go to state 73

    expr             go to state 110
    literal          go to state 97
    ref_expr         go to state 98
    assignment       go to state 99
    func_invocation  go to state 100


state 72

   56 return_statement: TOK_RETURN . expr

    TOK_MINUS      shift, and go to state 87
    TOK_BITNOT     shift, and go to state 88
    TOK_NOT        shift, and go to state 89
    TOK_LPAREN     shift, and go to state 90
    TOK_UINTNUM    shift, and go to state 91
    TOK_DOUBLENUM  shift, and go to state 92
    TOK_STRCONST   shift, and go to state 93
    TOK_TRUE       shift, and go to state 94
    TOK_FALSE      shift, and go to state 95
    TOK_IDENT      shift, and go to state 73

    expr             go to state 111
    literal          go to state 97
    ref_expr         go to state 98
    assignment       go to state 99
    func_invocation  go to state 100


state 73

  110 ref_expr: TOK_IDENT .
  112 func_invocation: TOK_IDENT . TOK_LPAREN expr_maybe_list TOK_RPAREN

    TOK_LPAREN  shift, and go to state 112

    $default  reduce using rule 110 (ref_expr)


state 74

   57 while_statement: TOK_WHILE . expr comp_statement

    TOK_MINUS      shift, and go to state 87
    TOK_BITNOT     shift, and go to state 88
    TOK_NOT        shift, and go to state 89
    TOK_LPAREN     shift, and go to state 90
    TOK_UINTNUM    shift, and go to state 91
    TOK_DOUBLENUM  shift, and go to state 92
    TOK_STRCONST   shift, and go to state 93
    TOK_TRUE       shift, and go to state 94
    TOK_FALSE      shift, and go to state 95
    TOK_IDENT      shift, and go to state 73

    expr             go to state 113
    literal          go to state 97
    ref_expr         go to state 98
    assignment       go to state 99
    func_invocation  go to state 100


state 75

   58 break_statement: TOK_BREAK . TOK_UINTNUM
   59                | TOK_BREAK .

    TOK_UINTNUM  shift, and go to state 114

    $default  reduce using rule 59 (break_statement)


state 76

   29 rule: event_pattern TOK_ARROW statement .

    $default  reduce using rule 29 (rule)


state 77

   44 statement: if_statement .

    $default  reduce using rule 44 (statement)


state 78

   45 statement: empty_statement . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 115


state 79

   48 statement: return_statement . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 116


state 80

   51 statement: while_statement .

    $default  reduce using rule 51 (statement)


state 81

   52 statement: break_statement . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 117


state 82

   49 statement: comp_statement .
   50          | comp_statement . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 118

    TOK_SEMICOLON  [reduce using rule 49 (statement)]
    $default       reduce using rule 49 (statement)


state 83

   60 comp_statement: enter_compound_statement . statement_plus leave_compound_statement

    TOK_LBRACE  shift, and go to state 70
    TOK_IF      shift, and go to state 71
    TOK_RETURN  shift, and go to state 72
    TOK_IDENT   shift, and go to state 73
    TOK_WHILE   shift, and go to state 74
    TOK_BREAK   shift, and go to state 75

    $default  reduce using rule 55 (empty_statement)

    statement_plus            go to state 119
    statement                 go to state 120
    if_statement              go to state 77
    empty_statement           go to state 78
    return_statement          go to state 79
    while_statement           go to state 80
    break_statement           go to state 81
    comp_statement            go to state 82
    enter_compound_statement  go to state 83
    ref_expr                  go to state 84
    assignment                go to state 85
    func_invocation           go to state 86


state 84

  111 assignment: ref_expr . TOK_ASSIGN expr

    TOK_ASSIGN  shift, and go to state 121


state 85

   47 statement: assignment . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 122


state 86

   46 statement: func_invocation . TOK_SEMICOLON

    TOK_SEMICOLON  shift, and go to state 123


state 87

   83 expr: TOK_MINUS . expr

    TOK_MINUS      shift, and go to state 87
    TOK_BITNOT     shift, and go to state 88
    TOK_NOT        shift, and go to state 89
    TOK_LPAREN     shift, and go to state 90
    TOK_UINTNUM    shift, and go to state 91
    TOK_DOUBLENUM  shift, and go to state 92
    TOK_STRCONST   shift, and go to state 93
    TOK_TRUE       shift, and go to state 94
    TOK_FALSE      shift, and go to state 95
    TOK_IDENT      shift, and go to state 73

    expr             go to state 124
    literal          go to state 97
    ref_expr         go to state 98
    assignment       go to state 99
    func_invocation  go to state 100


state 88

   89 expr: TOK_BITNOT . expr

    TOK_MINUS      shift, and go to state 87
    TOK_BITNOT     shift, and go to state 88
    TOK_NOT        shift, and go to state 89
    TOK_LPAREN     shift, and go to state 90
    TOK_UINTNUM    shift, and go to state 91
    TOK_DOUBLENUM  shift, and go to state 92
    TOK_STRCONST   shift, and go to state 93
    TOK_TRUE       shift, and go to state 94
    TOK_FALSE      shift, and go to state 95
    TOK_IDENT      shift, and go to state 73

    expr             go to state 125
    literal          go to state 97
    ref_expr         go to state 98
    assignment       go to state 99
    func_invocation  go to state 100


state 89

  103 expr: TOK_NOT . expr

    TOK_MINUS      shift, and go to state 87
    TOK_BITNOT     shift, and go to state 88
    TOK_NOT        shift, and go to state 89
    TOK_LPAREN     shift, and go to state 90
    TOK_UINTNUM    shift, and go to state 91
    TOK_DOUBLENUM  shift, and go to state 92
    TOK_STRCONST   shift, and go to state 93
    TOK_TRUE       shift, and go to state 94
    TOK_FALSE      shift, and go to state 95
    TOK_IDENT      shift, and go to state 73

    expr             go to state 126
    literal          go to state 97
    ref_expr         go to state 98
    assignment       go to state 99
    func_invocation  go to state 100


state 90

  104 expr: TOK_LPAREN . expr TOK_RPAREN

    TOK_MINUS      shift, and go to state 87
    TOK_BITNOT     shift, and go to state 88
    TOK_NOT        shift, and go to state 89
    TOK_LPAREN     shift, and go to state 90
    TOK_UINTNUM    shift, and go to state 91
    TOK_DOUBLENUM  shift, and go to state 92
    TOK_STRCONST   shift, and go to state 93
    TOK_TRUE       shift, and go to state 94
    TOK_FALSE      shift, and go to state 95
    TOK_IDENT      shift, and go to state 73

    expr             go to state 127
    literal          go to state 97
    ref_expr         go to state 98
    assignment       go to state 99
    func_invocation  go to state 100


state 91

  105 literal: TOK_UINTNUM .

    $default  reduce using rule 105 (literal)


state 92

  106 literal: TOK_DOUBLENUM .

    $default  reduce using rule 106 (literal)


state 93

  109 literal: TOK_STRCONST .

    $default  reduce using rule 109 (literal)


state 94

  107 literal: TOK_TRUE .

    $default  reduce using rule 107 (literal)


state 95

  108 literal: TOK_FALSE .

    $default  reduce using rule 108 (literal)


state 96

   37 prim_pattern: event_and_args TOK_BITOR expr .
   84 expr: expr . TOK_PLUS expr
   85     | expr . TOK_MINUS expr
   86     | expr . TOK_MULT expr
   87     | expr . TOK_DIV expr
   88     | expr . TOK_MOD expr
   90     | expr . TOK_BITAND expr
   91     | expr . TOK_BITOR expr
   92     | expr . TOK_BITXOR expr
   93     | expr . TOK_SHR expr
   94     | expr . TOK_SHL expr
   95     | expr . TOK_GT expr
   96     | expr . TOK_LT expr
   97     | expr . TOK_GE expr
   98     | expr . TOK_LE expr
   99     | expr . TOK_EQ expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_OR expr

    TOK_PLUS    shift, and go to state 128
    TOK_MINUS   shift, and go to state 129
    TOK_MULT    shift, and go to state 130
    TOK_DIV     shift, and go to state 131
    TOK_MOD     shift, and go to state 132
    TOK_BITAND  shift, and go to state 133
    TOK_BITOR   shift, and go to state 134
    TOK_BITXOR  shift, and go to state 135
    TOK_SHL     shift, and go to state 136
    TOK_SHR     shift, and go to state 137
    TOK_GT      shift, and go to state 138
    TOK_LT      shift, and go to state 139
    TOK_GE      shift, and go to state 140
    TOK_LE      shift, and go to state 141
    TOK_EQ      shift, and go to state 142
    TOK_NE      shift, and go to state 143
    TOK_AND     shift, and go to state 144
    TOK_OR      shift, and go to state 145

    $default  reduce using rule 37 (prim_pattern)


state 97

   79 expr: literal .

    $default  reduce using rule 79 (expr)


state 98

   80 expr: ref_expr .
  111 assignment: ref_expr . TOK_ASSIGN expr

    TOK_ASSIGN  shift, and go to state 121

    $default  reduce using rule 80 (expr)


state 99

   81 expr: assignment .

    $default  reduce using rule 81 (expr)


state 100

   82 expr: func_invocation .

    $default  reduce using rule 82 (expr)


state 101

   26 var_pos_assignment: TOK_ASSIGN . expr

    TOK_MINUS      shift, and go to state 87
    TOK_BITNOT     shift, and go to state 88
    TOK_NOT        shift, and go to state 89
    TOK_LPAREN     shift, and go to state 90
    TOK_UINTNUM    shift, and go to state 91
    TOK_DOUBLENUM  shift, and go to state 92
    TOK_STRCONST   shift, and go to state 93
    TOK_TRUE       shift, and go to state 94
    TOK_FALSE      shift, and go to state 95
    TOK_IDENT      shift, and go to state 73

    expr             go to state 146
    literal          go to state 97
    ref_expr         go to state 98
    assignment       go to state 99
    func_invocation  go to state 100


state 102

   23 var_decl1: type TOK_IDENT var_pos_assignment .

    $default  reduce using rule 23 (var_decl1)


state 103

   38 event_and_args: TOK_IDENT TOK_LPAREN event_param_maybe_list TOK_RPAREN .

    $default  reduce using rule 38 (event_and_args)


state 104

   43 event_param_list: event_param_list TOK_COMMA . TOK_IDENT

    TOK_IDENT  shift, and go to state 147


state 105

   12 func_decl: function_identifier TOK_LPAREN form_param_maybe_list TOK_RPAREN . func_maybe_body

    TOK_LBRACE  shift, and go to state 148

    $default  reduce using rule 14 (func_maybe_body)

    func_maybe_body  go to state 149
    func_body        go to state 150


state 106

   66 form_param_list: form_param_list TOK_COMMA . form_param

    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 60

    form_param  go to state 151
    type        go to state 64
    type_name   go to state 31
    base_type   go to state 32
    btype       go to state 33


state 107

   67 form_param: type TOK_IDENT .

    $default  reduce using rule 67 (form_param)


state 108

   24 var_decl1: var_decl1 TOK_COMMA TOK_IDENT var_pos_assignment .

    $default  reduce using rule 24 (var_decl1)


state 109

   27 event_decl: event_header TOK_LPAREN form_param_maybe_list TOK_RPAREN .

    $default  reduce using rule 27 (event_decl)


state 110

   53 if_statement: TOK_IF expr . statement
   54             | TOK_IF expr . statement TOK_ELSE statement
   84 expr: expr . TOK_PLUS expr
   85     | expr . TOK_MINUS expr
   86     | expr . TOK_MULT expr
   87     | expr . TOK_DIV expr
   88     | expr . TOK_MOD expr
   90     | expr . TOK_BITAND expr
   91     | expr . TOK_BITOR expr
   92     | expr . TOK_BITXOR expr
   93     | expr . TOK_SHR expr
   94     | expr . TOK_SHL expr
   95     | expr . TOK_GT expr
   96     | expr . TOK_LT expr
   97     | expr . TOK_GE expr
   98     | expr . TOK_LE expr
   99     | expr . TOK_EQ expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_OR expr

    TOK_PLUS    shift, and go to state 128
    TOK_MINUS   shift, and go to state 129
    TOK_MULT    shift, and go to state 130
    TOK_DIV     shift, and go to state 131
    TOK_MOD     shift, and go to state 132
    TOK_BITAND  shift, and go to state 133
    TOK_BITOR   shift, and go to state 134
    TOK_BITXOR  shift, and go to state 135
    TOK_SHL     shift, and go to state 136
    TOK_SHR     shift, and go to state 137
    TOK_GT      shift, and go to state 138
    TOK_LT      shift, and go to state 139
    TOK_GE      shift, and go to state 140
    TOK_LE      shift, and go to state 141
    TOK_EQ      shift, and go to state 142
    TOK_NE      shift, and go to state 143
    TOK_AND     shift, and go to state 144
    TOK_OR      shift, and go to state 145
    TOK_LBRACE  shift, and go to state 70
    TOK_IF      shift, and go to state 71
    TOK_RETURN  shift, and go to state 72
    TOK_IDENT   shift, and go to state 73
    TOK_WHILE   shift, and go to state 74
    TOK_BREAK   shift, and go to state 75

    $default  reduce using rule 55 (empty_statement)

    statement                 go to state 152
    if_statement              go to state 77
    empty_statement           go to state 78
    return_statement          go to state 79
    while_statement           go to state 80
    break_statement           go to state 81
    comp_statement            go to state 82
    enter_compound_statement  go to state 83
    ref_expr                  go to state 84
    assignment                go to state 85
    func_invocation           go to state 86


state 111

   56 return_statement: TOK_RETURN expr .
   84 expr: expr . TOK_PLUS expr
   85     | expr . TOK_MINUS expr
   86     | expr . TOK_MULT expr
   87     | expr . TOK_DIV expr
   88     | expr . TOK_MOD expr
   90     | expr . TOK_BITAND expr
   91     | expr . TOK_BITOR expr
   92     | expr . TOK_BITXOR expr
   93     | expr . TOK_SHR expr
   94     | expr . TOK_SHL expr
   95     | expr . TOK_GT expr
   96     | expr . TOK_LT expr
   97     | expr . TOK_GE expr
   98     | expr . TOK_LE expr
   99     | expr . TOK_EQ expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_OR expr

    TOK_PLUS    shift, and go to state 128
    TOK_MINUS   shift, and go to state 129
    TOK_MULT    shift, and go to state 130
    TOK_DIV     shift, and go to state 131
    TOK_MOD     shift, and go to state 132
    TOK_BITAND  shift, and go to state 133
    TOK_BITOR   shift, and go to state 134
    TOK_BITXOR  shift, and go to state 135
    TOK_SHL     shift, and go to state 136
    TOK_SHR     shift, and go to state 137
    TOK_GT      shift, and go to state 138
    TOK_LT      shift, and go to state 139
    TOK_GE      shift, and go to state 140
    TOK_LE      shift, and go to state 141
    TOK_EQ      shift, and go to state 142
    TOK_NE      shift, and go to state 143
    TOK_AND     shift, and go to state 144
    TOK_OR      shift, and go to state 145

    $default  reduce using rule 56 (return_statement)


state 112

  112 func_invocation: TOK_IDENT TOK_LPAREN . expr_maybe_list TOK_RPAREN

    TOK_MINUS      shift, and go to state 87
    TOK_BITNOT     shift, and go to state 88
    TOK_NOT        shift, and go to state 89
    TOK_LPAREN     shift, and go to state 90
    TOK_UINTNUM    shift, and go to state 91
    TOK_DOUBLENUM  shift, and go to state 92
    TOK_STRCONST   shift, and go to state 93
    TOK_TRUE       shift, and go to state 94
    TOK_FALSE      shift, and go to state 95
    TOK_IDENT      shift, and go to state 73

    $default  reduce using rule 113 (expr_maybe_list)

    expr             go to state 153
    literal          go to state 97
    ref_expr         go to state 98
    assignment       go to state 99
    func_invocation  go to state 100
    expr_maybe_list  go to state 154
    expr_list        go to state 155


state 113

   57 while_statement: TOK_WHILE expr . comp_statement
   84 expr: expr . TOK_PLUS expr
   85     | expr . TOK_MINUS expr
   86     | expr . TOK_MULT expr
   87     | expr . TOK_DIV expr
   88     | expr . TOK_MOD expr
   90     | expr . TOK_BITAND expr
   91     | expr . TOK_BITOR expr
   92     | expr . TOK_BITXOR expr
   93     | expr . TOK_SHR expr
   94     | expr . TOK_SHL expr
   95     | expr . TOK_GT expr
   96     | expr . TOK_LT expr
   97     | expr . TOK_GE expr
   98     | expr . TOK_LE expr
   99     | expr . TOK_EQ expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_OR expr

    TOK_PLUS    shift, and go to state 128
    TOK_MINUS   shift, and go to state 129
    TOK_MULT    shift, and go to state 130
    TOK_DIV     shift, and go to state 131
    TOK_MOD     shift, and go to state 132
    TOK_BITAND  shift, and go to state 133
    TOK_BITOR   shift, and go to state 134
    TOK_BITXOR  shift, and go to state 135
    TOK_SHL     shift, and go to state 136
    TOK_SHR     shift, and go to state 137
    TOK_GT      shift, and go to state 138
    TOK_LT      shift, and go to state 139
    TOK_GE      shift, and go to state 140
    TOK_LE      shift, and go to state 141
    TOK_EQ      shift, and go to state 142
    TOK_NE      shift, and go to state 143
    TOK_AND     shift, and go to state 144
    TOK_OR      shift, and go to state 145
    TOK_LBRACE  shift, and go to state 70

    comp_statement            go to state 156
    enter_compound_statement  go to state 83


state 114

   58 break_statement: TOK_BREAK TOK_UINTNUM .

    $default  reduce using rule 58 (break_statement)


state 115

   45 statement: empty_statement TOK_SEMICOLON .

    $default  reduce using rule 45 (statement)


state 116

   48 statement: return_statement TOK_SEMICOLON .

    $default  reduce using rule 48 (statement)


state 117

   52 statement: break_statement TOK_SEMICOLON .

    $default  reduce using rule 52 (statement)


state 118

   50 statement: comp_statement TOK_SEMICOLON .

    $default  reduce using rule 50 (statement)


state 119

   18 statement_plus: statement_plus . statement
   60 comp_statement: enter_compound_statement statement_plus . leave_compound_statement

    TOK_LBRACE  shift, and go to state 70
    TOK_RBRACE  shift, and go to state 157
    TOK_IF      shift, and go to state 71
    TOK_RETURN  shift, and go to state 72
    TOK_IDENT   shift, and go to state 73
    TOK_WHILE   shift, and go to state 74
    TOK_BREAK   shift, and go to state 75

    $default  reduce using rule 55 (empty_statement)

    statement                 go to state 158
    if_statement              go to state 77
    empty_statement           go to state 78
    return_statement          go to state 79
    while_statement           go to state 80
    break_statement           go to state 81
    comp_statement            go to state 82
    enter_compound_statement  go to state 83
    leave_compound_statement  go to state 159
    ref_expr                  go to state 84
    assignment                go to state 85
    func_invocation           go to state 86


state 120

   17 statement_plus: statement .

    $default  reduce using rule 17 (statement_plus)


state 121

  111 assignment: ref_expr TOK_ASSIGN . expr

    TOK_MINUS      shift, and go to state 87
    TOK_BITNOT     shift, and go to state 88
    TOK_NOT        shift, and go to state 89
    TOK_LPAREN     shift, and go to state 90
    TOK_UINTNUM    shift, and go to state 91
    TOK_DOUBLENUM  shift, and go to state 92
    TOK_STRCONST   shift, and go to state 93
    TOK_TRUE       shift, and go to state 94
    TOK_FALSE      shift, and go to state 95
    TOK_IDENT      shift, and go to state 73

    expr             go to state 160
    literal          go to state 97
    ref_expr         go to state 98
    assignment       go to state 99
    func_invocation  go to state 100


state 122

   47 statement: assignment TOK_SEMICOLON .

    $default  reduce using rule 47 (statement)


state 123

   46 statement: func_invocation TOK_SEMICOLON .

    $default  reduce using rule 46 (statement)


state 124

   83 expr: TOK_MINUS expr .
   84     | expr . TOK_PLUS expr
   85     | expr . TOK_MINUS expr
   86     | expr . TOK_MULT expr
   87     | expr . TOK_DIV expr
   88     | expr . TOK_MOD expr
   90     | expr . TOK_BITAND expr
   91     | expr . TOK_BITOR expr
   92     | expr . TOK_BITXOR expr
   93     | expr . TOK_SHR expr
   94     | expr . TOK_SHL expr
   95     | expr . TOK_GT expr
   96     | expr . TOK_LT expr
   97     | expr . TOK_GE expr
   98     | expr . TOK_LE expr
   99     | expr . TOK_EQ expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_OR expr

    TOK_MULT  shift, and go to state 130
    TOK_DIV   shift, and go to state 131
    TOK_MOD   shift, and go to state 132

    $default  reduce using rule 83 (expr)


state 125

   84 expr: expr . TOK_PLUS expr
   85     | expr . TOK_MINUS expr
   86     | expr . TOK_MULT expr
   87     | expr . TOK_DIV expr
   88     | expr . TOK_MOD expr
   89     | TOK_BITNOT expr .
   90     | expr . TOK_BITAND expr
   91     | expr . TOK_BITOR expr
   92     | expr . TOK_BITXOR expr
   93     | expr . TOK_SHR expr
   94     | expr . TOK_SHL expr
   95     | expr . TOK_GT expr
   96     | expr . TOK_LT expr
   97     | expr . TOK_GE expr
   98     | expr . TOK_LE expr
   99     | expr . TOK_EQ expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_OR expr

    TOK_PLUS   shift, and go to state 128
    TOK_MINUS  shift, and go to state 129
    TOK_MULT   shift, and go to state 130
    TOK_DIV    shift, and go to state 131
    TOK_MOD    shift, and go to state 132
    TOK_SHL    shift, and go to state 136
    TOK_SHR    shift, and go to state 137

    $default  reduce using rule 89 (expr)


state 126

   84 expr: expr . TOK_PLUS expr
   85     | expr . TOK_MINUS expr
   86     | expr . TOK_MULT expr
   87     | expr . TOK_DIV expr
   88     | expr . TOK_MOD expr
   90     | expr . TOK_BITAND expr
   91     | expr . TOK_BITOR expr
   92     | expr . TOK_BITXOR expr
   93     | expr . TOK_SHR expr
   94     | expr . TOK_SHL expr
   95     | expr . TOK_GT expr
   96     | expr . TOK_LT expr
   97     | expr . TOK_GE expr
   98     | expr . TOK_LE expr
   99     | expr . TOK_EQ expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_OR expr
  103     | TOK_NOT expr .

    TOK_PLUS    shift, and go to state 128
    TOK_MINUS   shift, and go to state 129
    TOK_MULT    shift, and go to state 130
    TOK_DIV     shift, and go to state 131
    TOK_MOD     shift, and go to state 132
    TOK_BITAND  shift, and go to state 133
    TOK_BITOR   shift, and go to state 134
    TOK_BITXOR  shift, and go to state 135
    TOK_SHL     shift, and go to state 136
    TOK_SHR     shift, and go to state 137
    TOK_GT      shift, and go to state 138
    TOK_LT      shift, and go to state 139
    TOK_GE      shift, and go to state 140
    TOK_LE      shift, and go to state 141
    TOK_EQ      shift, and go to state 142
    TOK_NE      shift, and go to state 143

    $default  reduce using rule 103 (expr)


state 127

   84 expr: expr . TOK_PLUS expr
   85     | expr . TOK_MINUS expr
   86     | expr . TOK_MULT expr
   87     | expr . TOK_DIV expr
   88     | expr . TOK_MOD expr
   90     | expr . TOK_BITAND expr
   91     | expr . TOK_BITOR expr
   92     | expr . TOK_BITXOR expr
   93     | expr . TOK_SHR expr
   94     | expr . TOK_SHL expr
   95     | expr . TOK_GT expr
   96     | expr . TOK_LT expr
   97     | expr . TOK_GE expr
   98     | expr . TOK_LE expr
   99     | expr . TOK_EQ expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_OR expr
  104     | TOK_LPAREN expr . TOK_RPAREN

    TOK_PLUS    shift, and go to state 128
    TOK_MINUS   shift, and go to state 129
    TOK_MULT    shift, and go to state 130
    TOK_DIV     shift, and go to state 131
    TOK_MOD     shift, and go to state 132
    TOK_BITAND  shift, and go to state 133
    TOK_BITOR   shift, and go to state 134
    TOK_BITXOR  shift, and go to state 135
    TOK_SHL     shift, and go to state 136
    TOK_SHR     shift, and go to state 137
    TOK_GT      shift, and go to state 138
    TOK_LT      shift, and go to state 139
    TOK_GE      shift, and go to state 140
    TOK_LE      shift, and go to state 141
    TOK_EQ      shift, and go to state 142
    TOK_NE      shift, and go to state 143
    TOK_AND     shift, and go to state 144
    TOK_OR      shift, and go to state 145
    TOK_RPAREN  shift, and go to state 161


state 128

   84 expr: expr TOK_PLUS . expr

    TOK_MINUS      shift, and go to state 87
    TOK_BITNOT     shift, and go to state 88
    TOK_NOT        shift, and go to state 89
    TOK_LPAREN     shift, and go to state 90
    TOK_UINTNUM    shift, and go to state 91
    TOK_DOUBLENUM  shift, and go to state 92
    TOK_STRCONST   shift, and go to state 93
    TOK_TRUE       shift, and go to state 94
    TOK_FALSE      shift, and go to state 95
    TOK_IDENT      shift, and go to state 73

    expr             go to state 162
    literal          go to state 97
    ref_expr         go to state 98
    assignment       go to state 99
    func_invocation  go to state 100


state 129

   85 expr: expr TOK_MINUS . expr

    TOK_MINUS      shift, and go to state 87
    TOK_BITNOT     shift, and go to state 88
    TOK_NOT        shift, and go to state 89
    TOK_LPAREN     shift, and go to state 90
    TOK_UINTNUM    shift, and go to state 91
    TOK_DOUBLENUM  shift, and go to state 92
    TOK_STRCONST   shift, and go to state 93
    TOK_TRUE       shift, and go to state 94
    TOK_FALSE      shift, and go to state 95
    TOK_IDENT      shift, and go to state 73

    expr             go to state 163
    literal          go to state 97
    ref_expr         go to state 98
    assignment       go to state 99
    func_invocation  go to state 100


state 130

   86 expr: expr TOK_MULT . expr

    TOK_MINUS      shift, and go to state 87
    TOK_BITNOT     shift, and go to state 88
    TOK_NOT        shift, and go to state 89
    TOK_LPAREN     shift, and go to state 90
    TOK_UINTNUM    shift, and go to state 91
    TOK_DOUBLENUM  shift, and go to state 92
    TOK_STRCONST   shift, and go to state 93
    TOK_TRUE       shift, and go to state 94
    TOK_FALSE      shift, and go to state 95
    TOK_IDENT      shift, and go to state 73

    expr             go to state 164
    literal          go to state 97
    ref_expr         go to state 98
    assignment       go to state 99
    func_invocation  go to state 100


state 131

   87 expr: expr TOK_DIV . expr

    TOK_MINUS      shift, and go to state 87
    TOK_BITNOT     shift, and go to state 88
    TOK_NOT        shift, and go to state 89
    TOK_LPAREN     shift, and go to state 90
    TOK_UINTNUM    shift, and go to state 91
    TOK_DOUBLENUM  shift, and go to state 92
    TOK_STRCONST   shift, and go to state 93
    TOK_TRUE       shift, and go to state 94
    TOK_FALSE      shift, and go to state 95
    TOK_IDENT      shift, and go to state 73

    expr             go to state 165
    literal          go to state 97
    ref_expr         go to state 98
    assignment       go to state 99
    func_invocation  go to state 100


state 132

   88 expr: expr TOK_MOD . expr

    TOK_MINUS      shift, and go to state 87
    TOK_BITNOT     shift, and go to state 88
    TOK_NOT        shift, and go to state 89
    TOK_LPAREN     shift, and go to state 90
    TOK_UINTNUM    shift, and go to state 91
    TOK_DOUBLENUM  shift, and go to state 92
    TOK_STRCONST   shift, and go to state 93
    TOK_TRUE       shift, and go to state 94
    TOK_FALSE      shift, and go to state 95
    TOK_IDENT      shift, and go to state 73

    expr             go to state 166
    literal          go to state 97
    ref_expr         go to state 98
    assignment       go to state 99
    func_invocation  go to state 100


state 133

   90 expr: expr TOK_BITAND . expr

    TOK_MINUS      shift, and go to state 87
    TOK_BITNOT     shift, and go to state 88
    TOK_NOT        shift, and go to state 89
    TOK_LPAREN     shift, and go to state 90
    TOK_UINTNUM    shift, and go to state 91
    TOK_DOUBLENUM  shift, and go to state 92
    TOK_STRCONST   shift, and go to state 93
    TOK_TRUE       shift, and go to state 94
    TOK_FALSE      shift, and go to state 95
    TOK_IDENT      shift, and go to state 73

    expr             go to state 167
    literal          go to state 97
    ref_expr         go to state 98
    assignment       go to state 99
    func_invocation  go to state 100


state 134

   91 expr: expr TOK_BITOR . expr

    TOK_MINUS      shift, and go to state 87
    TOK_BITNOT     shift, and go to state 88
    TOK_NOT        shift, and go to state 89
    TOK_LPAREN     shift, and go to state 90
    TOK_UINTNUM    shift, and go to state 91
    TOK_DOUBLENUM  shift, and go to state 92
    TOK_STRCONST   shift, and go to state 93
    TOK_TRUE       shift, and go to state 94
    TOK_FALSE      shift, and go to state 95
    TOK_IDENT      shift, and go to state 73

    expr             go to state 168
    literal          go to state 97
    ref_expr         go to state 98
    assignment       go to state 99
    func_invocation  go to state 100


state 135

   92 expr: expr TOK_BITXOR . expr

    TOK_MINUS      shift, and go to state 87
    TOK_BITNOT     shift, and go to state 88
    TOK_NOT        shift, and go to state 89
    TOK_LPAREN     shift, and go to state 90
    TOK_UINTNUM    shift, and go to state 91
    TOK_DOUBLENUM  shift, and go to state 92
    TOK_STRCONST   shift, and go to state 93
    TOK_TRUE       shift, and go to state 94
    TOK_FALSE      shift, and go to state 95
    TOK_IDENT      shift, and go to state 73

    expr             go to state 169
    literal          go to state 97
    ref_expr         go to state 98
    assignment       go to state 99
    func_invocation  go to state 100


state 136

   94 expr: expr TOK_SHL . expr

    TOK_MINUS      shift, and go to state 87
    TOK_BITNOT     shift, and go to state 88
    TOK_NOT        shift, and go to state 89
    TOK_LPAREN     shift, and go to state 90
    TOK_UINTNUM    shift, and go to state 91
    TOK_DOUBLENUM  shift, and go to state 92
    TOK_STRCONST   shift, and go to state 93
    TOK_TRUE       shift, and go to state 94
    TOK_FALSE      shift, and go to state 95
    TOK_IDENT      shift, and go to state 73

    expr             go to state 170
    literal          go to state 97
    ref_expr         go to state 98
    assignment       go to state 99
    func_invocation  go to state 100


state 137

   93 expr: expr TOK_SHR . expr

    TOK_MINUS      shift, and go to state 87
    TOK_BITNOT     shift, and go to state 88
    TOK_NOT        shift, and go to state 89
    TOK_LPAREN     shift, and go to state 90
    TOK_UINTNUM    shift, and go to state 91
    TOK_DOUBLENUM  shift, and go to state 92
    TOK_STRCONST   shift, and go to state 93
    TOK_TRUE       shift, and go to state 94
    TOK_FALSE      shift, and go to state 95
    TOK_IDENT      shift, and go to state 73

    expr             go to state 171
    literal          go to state 97
    ref_expr         go to state 98
    assignment       go to state 99
    func_invocation  go to state 100


state 138

   95 expr: expr TOK_GT . expr

    TOK_MINUS      shift, and go to state 87
    TOK_BITNOT     shift, and go to state 88
    TOK_NOT        shift, and go to state 89
    TOK_LPAREN     shift, and go to state 90
    TOK_UINTNUM    shift, and go to state 91
    TOK_DOUBLENUM  shift, and go to state 92
    TOK_STRCONST   shift, and go to state 93
    TOK_TRUE       shift, and go to state 94
    TOK_FALSE      shift, and go to state 95
    TOK_IDENT      shift, and go to state 73

    expr             go to state 172
    literal          go to state 97
    ref_expr         go to state 98
    assignment       go to state 99
    func_invocation  go to state 100


state 139

   96 expr: expr TOK_LT . expr

    TOK_MINUS      shift, and go to state 87
    TOK_BITNOT     shift, and go to state 88
    TOK_NOT        shift, and go to state 89
    TOK_LPAREN     shift, and go to state 90
    TOK_UINTNUM    shift, and go to state 91
    TOK_DOUBLENUM  shift, and go to state 92
    TOK_STRCONST   shift, and go to state 93
    TOK_TRUE       shift, and go to state 94
    TOK_FALSE      shift, and go to state 95
    TOK_IDENT      shift, and go to state 73

    expr             go to state 173
    literal          go to state 97
    ref_expr         go to state 98
    assignment       go to state 99
    func_invocation  go to state 100


state 140

   97 expr: expr TOK_GE . expr

    TOK_MINUS      shift, and go to state 87
    TOK_BITNOT     shift, and go to state 88
    TOK_NOT        shift, and go to state 89
    TOK_LPAREN     shift, and go to state 90
    TOK_UINTNUM    shift, and go to state 91
    TOK_DOUBLENUM  shift, and go to state 92
    TOK_STRCONST   shift, and go to state 93
    TOK_TRUE       shift, and go to state 94
    TOK_FALSE      shift, and go to state 95
    TOK_IDENT      shift, and go to state 73

    expr             go to state 174
    literal          go to state 97
    ref_expr         go to state 98
    assignment       go to state 99
    func_invocation  go to state 100


state 141

   98 expr: expr TOK_LE . expr

    TOK_MINUS      shift, and go to state 87
    TOK_BITNOT     shift, and go to state 88
    TOK_NOT        shift, and go to state 89
    TOK_LPAREN     shift, and go to state 90
    TOK_UINTNUM    shift, and go to state 91
    TOK_DOUBLENUM  shift, and go to state 92
    TOK_STRCONST   shift, and go to state 93
    TOK_TRUE       shift, and go to state 94
    TOK_FALSE      shift, and go to state 95
    TOK_IDENT      shift, and go to state 73

    expr             go to state 175
    literal          go to state 97
    ref_expr         go to state 98
    assignment       go to state 99
    func_invocation  go to state 100


state 142

   99 expr: expr TOK_EQ . expr

    TOK_MINUS      shift, and go to state 87
    TOK_BITNOT     shift, and go to state 88
    TOK_NOT        shift, and go to state 89
    TOK_LPAREN     shift, and go to state 90
    TOK_UINTNUM    shift, and go to state 91
    TOK_DOUBLENUM  shift, and go to state 92
    TOK_STRCONST   shift, and go to state 93
    TOK_TRUE       shift, and go to state 94
    TOK_FALSE      shift, and go to state 95
    TOK_IDENT      shift, and go to state 73

    expr             go to state 176
    literal          go to state 97
    ref_expr         go to state 98
    assignment       go to state 99
    func_invocation  go to state 100


state 143

  100 expr: expr TOK_NE . expr

    TOK_MINUS      shift, and go to state 87
    TOK_BITNOT     shift, and go to state 88
    TOK_NOT        shift, and go to state 89
    TOK_LPAREN     shift, and go to state 90
    TOK_UINTNUM    shift, and go to state 91
    TOK_DOUBLENUM  shift, and go to state 92
    TOK_STRCONST   shift, and go to state 93
    TOK_TRUE       shift, and go to state 94
    TOK_FALSE      shift, and go to state 95
    TOK_IDENT      shift, and go to state 73

    expr             go to state 177
    literal          go to state 97
    ref_expr         go to state 98
    assignment       go to state 99
    func_invocation  go to state 100


state 144

  101 expr: expr TOK_AND . expr

    TOK_MINUS      shift, and go to state 87
    TOK_BITNOT     shift, and go to state 88
    TOK_NOT        shift, and go to state 89
    TOK_LPAREN     shift, and go to state 90
    TOK_UINTNUM    shift, and go to state 91
    TOK_DOUBLENUM  shift, and go to state 92
    TOK_STRCONST   shift, and go to state 93
    TOK_TRUE       shift, and go to state 94
    TOK_FALSE      shift, and go to state 95
    TOK_IDENT      shift, and go to state 73

    expr             go to state 178
    literal          go to state 97
    ref_expr         go to state 98
    assignment       go to state 99
    func_invocation  go to state 100


state 145

  102 expr: expr TOK_OR . expr

    TOK_MINUS      shift, and go to state 87
    TOK_BITNOT     shift, and go to state 88
    TOK_NOT        shift, and go to state 89
    TOK_LPAREN     shift, and go to state 90
    TOK_UINTNUM    shift, and go to state 91
    TOK_DOUBLENUM  shift, and go to state 92
    TOK_STRCONST   shift, and go to state 93
    TOK_TRUE       shift, and go to state 94
    TOK_FALSE      shift, and go to state 95
    TOK_IDENT      shift, and go to state 73

    expr             go to state 179
    literal          go to state 97
    ref_expr         go to state 98
    assignment       go to state 99
    func_invocation  go to state 100


state 146

   26 var_pos_assignment: TOK_ASSIGN expr .
   84 expr: expr . TOK_PLUS expr
   85     | expr . TOK_MINUS expr
   86     | expr . TOK_MULT expr
   87     | expr . TOK_DIV expr
   88     | expr . TOK_MOD expr
   90     | expr . TOK_BITAND expr
   91     | expr . TOK_BITOR expr
   92     | expr . TOK_BITXOR expr
   93     | expr . TOK_SHR expr
   94     | expr . TOK_SHL expr
   95     | expr . TOK_GT expr
   96     | expr . TOK_LT expr
   97     | expr . TOK_GE expr
   98     | expr . TOK_LE expr
   99     | expr . TOK_EQ expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_OR expr

    TOK_PLUS    shift, and go to state 128
    TOK_MINUS   shift, and go to state 129
    TOK_MULT    shift, and go to state 130
    TOK_DIV     shift, and go to state 131
    TOK_MOD     shift, and go to state 132
    TOK_BITAND  shift, and go to state 133
    TOK_BITOR   shift, and go to state 134
    TOK_BITXOR  shift, and go to state 135
    TOK_SHL     shift, and go to state 136
    TOK_SHR     shift, and go to state 137
    TOK_GT      shift, and go to state 138
    TOK_LT      shift, and go to state 139
    TOK_GE      shift, and go to state 140
    TOK_LE      shift, and go to state 141
    TOK_EQ      shift, and go to state 142
    TOK_NE      shift, and go to state 143
    TOK_AND     shift, and go to state 144
    TOK_OR      shift, and go to state 145

    $default  reduce using rule 26 (var_pos_assignment)


state 147

   43 event_param_list: event_param_list TOK_COMMA TOK_IDENT .

    $default  reduce using rule 43 (event_param_list)


state 148

   16 func_body: TOK_LBRACE . var_decl_star statement_plus TOK_RBRACE

    $default  reduce using rule 19 (var_decl_star)

    var_decl_star  go to state 180


state 149

   12 func_decl: function_identifier TOK_LPAREN form_param_maybe_list TOK_RPAREN func_maybe_body .

    $default  reduce using rule 12 (func_decl)


state 150

   15 func_maybe_body: func_body .

    $default  reduce using rule 15 (func_maybe_body)


state 151

   66 form_param_list: form_param_list TOK_COMMA form_param .

    $default  reduce using rule 66 (form_param_list)


state 152

   53 if_statement: TOK_IF expr statement .
   54             | TOK_IF expr statement . TOK_ELSE statement

    TOK_ELSE  shift, and go to state 181

    TOK_ELSE  [reduce using rule 53 (if_statement)]
    $default  reduce using rule 53 (if_statement)


state 153

   84 expr: expr . TOK_PLUS expr
   85     | expr . TOK_MINUS expr
   86     | expr . TOK_MULT expr
   87     | expr . TOK_DIV expr
   88     | expr . TOK_MOD expr
   90     | expr . TOK_BITAND expr
   91     | expr . TOK_BITOR expr
   92     | expr . TOK_BITXOR expr
   93     | expr . TOK_SHR expr
   94     | expr . TOK_SHL expr
   95     | expr . TOK_GT expr
   96     | expr . TOK_LT expr
   97     | expr . TOK_GE expr
   98     | expr . TOK_LE expr
   99     | expr . TOK_EQ expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_OR expr
  115 expr_list: expr .

    TOK_PLUS    shift, and go to state 128
    TOK_MINUS   shift, and go to state 129
    TOK_MULT    shift, and go to state 130
    TOK_DIV     shift, and go to state 131
    TOK_MOD     shift, and go to state 132
    TOK_BITAND  shift, and go to state 133
    TOK_BITOR   shift, and go to state 134
    TOK_BITXOR  shift, and go to state 135
    TOK_SHL     shift, and go to state 136
    TOK_SHR     shift, and go to state 137
    TOK_GT      shift, and go to state 138
    TOK_LT      shift, and go to state 139
    TOK_GE      shift, and go to state 140
    TOK_LE      shift, and go to state 141
    TOK_EQ      shift, and go to state 142
    TOK_NE      shift, and go to state 143
    TOK_AND     shift, and go to state 144
    TOK_OR      shift, and go to state 145

    $default  reduce using rule 115 (expr_list)


state 154

  112 func_invocation: TOK_IDENT TOK_LPAREN expr_maybe_list . TOK_RPAREN

    TOK_RPAREN  shift, and go to state 182


state 155

  114 expr_maybe_list: expr_list .
  116 expr_list: expr_list . TOK_COMMA expr

    TOK_COMMA  shift, and go to state 183

    $default  reduce using rule 114 (expr_maybe_list)


state 156

   57 while_statement: TOK_WHILE expr comp_statement .

    $default  reduce using rule 57 (while_statement)


state 157

   62 leave_compound_statement: TOK_RBRACE .

    $default  reduce using rule 62 (leave_compound_statement)


state 158

   18 statement_plus: statement_plus statement .

    $default  reduce using rule 18 (statement_plus)


state 159

   60 comp_statement: enter_compound_statement statement_plus leave_compound_statement .

    $default  reduce using rule 60 (comp_statement)


state 160

   84 expr: expr . TOK_PLUS expr
   85     | expr . TOK_MINUS expr
   86     | expr . TOK_MULT expr
   87     | expr . TOK_DIV expr
   88     | expr . TOK_MOD expr
   90     | expr . TOK_BITAND expr
   91     | expr . TOK_BITOR expr
   92     | expr . TOK_BITXOR expr
   93     | expr . TOK_SHR expr
   94     | expr . TOK_SHL expr
   95     | expr . TOK_GT expr
   96     | expr . TOK_LT expr
   97     | expr . TOK_GE expr
   98     | expr . TOK_LE expr
   99     | expr . TOK_EQ expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_OR expr
  111 assignment: ref_expr TOK_ASSIGN expr .

    TOK_PLUS    shift, and go to state 128
    TOK_MINUS   shift, and go to state 129
    TOK_MULT    shift, and go to state 130
    TOK_DIV     shift, and go to state 131
    TOK_MOD     shift, and go to state 132
    TOK_BITAND  shift, and go to state 133
    TOK_BITOR   shift, and go to state 134
    TOK_BITXOR  shift, and go to state 135
    TOK_SHL     shift, and go to state 136
    TOK_SHR     shift, and go to state 137
    TOK_GT      shift, and go to state 138
    TOK_LT      shift, and go to state 139
    TOK_GE      shift, and go to state 140
    TOK_LE      shift, and go to state 141
    TOK_EQ      shift, and go to state 142
    TOK_NE      shift, and go to state 143
    TOK_AND     shift, and go to state 144
    TOK_OR      shift, and go to state 145

    $default  reduce using rule 111 (assignment)


state 161

  104 expr: TOK_LPAREN expr TOK_RPAREN .

    $default  reduce using rule 104 (expr)


state 162

   84 expr: expr . TOK_PLUS expr
   84     | expr TOK_PLUS expr .
   85     | expr . TOK_MINUS expr
   86     | expr . TOK_MULT expr
   87     | expr . TOK_DIV expr
   88     | expr . TOK_MOD expr
   90     | expr . TOK_BITAND expr
   91     | expr . TOK_BITOR expr
   92     | expr . TOK_BITXOR expr
   93     | expr . TOK_SHR expr
   94     | expr . TOK_SHL expr
   95     | expr . TOK_GT expr
   96     | expr . TOK_LT expr
   97     | expr . TOK_GE expr
   98     | expr . TOK_LE expr
   99     | expr . TOK_EQ expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_OR expr

    TOK_MULT  shift, and go to state 130
    TOK_DIV   shift, and go to state 131
    TOK_MOD   shift, and go to state 132

    $default  reduce using rule 84 (expr)


state 163

   84 expr: expr . TOK_PLUS expr
   85     | expr . TOK_MINUS expr
   85     | expr TOK_MINUS expr .
   86     | expr . TOK_MULT expr
   87     | expr . TOK_DIV expr
   88     | expr . TOK_MOD expr
   90     | expr . TOK_BITAND expr
   91     | expr . TOK_BITOR expr
   92     | expr . TOK_BITXOR expr
   93     | expr . TOK_SHR expr
   94     | expr . TOK_SHL expr
   95     | expr . TOK_GT expr
   96     | expr . TOK_LT expr
   97     | expr . TOK_GE expr
   98     | expr . TOK_LE expr
   99     | expr . TOK_EQ expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_OR expr

    TOK_MULT  shift, and go to state 130
    TOK_DIV   shift, and go to state 131
    TOK_MOD   shift, and go to state 132

    $default  reduce using rule 85 (expr)


state 164

   84 expr: expr . TOK_PLUS expr
   85     | expr . TOK_MINUS expr
   86     | expr . TOK_MULT expr
   86     | expr TOK_MULT expr .
   87     | expr . TOK_DIV expr
   88     | expr . TOK_MOD expr
   90     | expr . TOK_BITAND expr
   91     | expr . TOK_BITOR expr
   92     | expr . TOK_BITXOR expr
   93     | expr . TOK_SHR expr
   94     | expr . TOK_SHL expr
   95     | expr . TOK_GT expr
   96     | expr . TOK_LT expr
   97     | expr . TOK_GE expr
   98     | expr . TOK_LE expr
   99     | expr . TOK_EQ expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_OR expr

    $default  reduce using rule 86 (expr)


state 165

   84 expr: expr . TOK_PLUS expr
   85     | expr . TOK_MINUS expr
   86     | expr . TOK_MULT expr
   87     | expr . TOK_DIV expr
   87     | expr TOK_DIV expr .
   88     | expr . TOK_MOD expr
   90     | expr . TOK_BITAND expr
   91     | expr . TOK_BITOR expr
   92     | expr . TOK_BITXOR expr
   93     | expr . TOK_SHR expr
   94     | expr . TOK_SHL expr
   95     | expr . TOK_GT expr
   96     | expr . TOK_LT expr
   97     | expr . TOK_GE expr
   98     | expr . TOK_LE expr
   99     | expr . TOK_EQ expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_OR expr

    $default  reduce using rule 87 (expr)


state 166

   84 expr: expr . TOK_PLUS expr
   85     | expr . TOK_MINUS expr
   86     | expr . TOK_MULT expr
   87     | expr . TOK_DIV expr
   88     | expr . TOK_MOD expr
   88     | expr TOK_MOD expr .
   90     | expr . TOK_BITAND expr
   91     | expr . TOK_BITOR expr
   92     | expr . TOK_BITXOR expr
   93     | expr . TOK_SHR expr
   94     | expr . TOK_SHL expr
   95     | expr . TOK_GT expr
   96     | expr . TOK_LT expr
   97     | expr . TOK_GE expr
   98     | expr . TOK_LE expr
   99     | expr . TOK_EQ expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_OR expr

    $default  reduce using rule 88 (expr)


state 167

   84 expr: expr . TOK_PLUS expr
   85     | expr . TOK_MINUS expr
   86     | expr . TOK_MULT expr
   87     | expr . TOK_DIV expr
   88     | expr . TOK_MOD expr
   90     | expr . TOK_BITAND expr
   90     | expr TOK_BITAND expr .
   91     | expr . TOK_BITOR expr
   92     | expr . TOK_BITXOR expr
   93     | expr . TOK_SHR expr
   94     | expr . TOK_SHL expr
   95     | expr . TOK_GT expr
   96     | expr . TOK_LT expr
   97     | expr . TOK_GE expr
   98     | expr . TOK_LE expr
   99     | expr . TOK_EQ expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_OR expr

    TOK_PLUS   shift, and go to state 128
    TOK_MINUS  shift, and go to state 129
    TOK_MULT   shift, and go to state 130
    TOK_DIV    shift, and go to state 131
    TOK_MOD    shift, and go to state 132
    TOK_SHL    shift, and go to state 136
    TOK_SHR    shift, and go to state 137

    $default  reduce using rule 90 (expr)


state 168

   84 expr: expr . TOK_PLUS expr
   85     | expr . TOK_MINUS expr
   86     | expr . TOK_MULT expr
   87     | expr . TOK_DIV expr
   88     | expr . TOK_MOD expr
   90     | expr . TOK_BITAND expr
   91     | expr . TOK_BITOR expr
   91     | expr TOK_BITOR expr .
   92     | expr . TOK_BITXOR expr
   93     | expr . TOK_SHR expr
   94     | expr . TOK_SHL expr
   95     | expr . TOK_GT expr
   96     | expr . TOK_LT expr
   97     | expr . TOK_GE expr
   98     | expr . TOK_LE expr
   99     | expr . TOK_EQ expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_OR expr

    TOK_PLUS    shift, and go to state 128
    TOK_MINUS   shift, and go to state 129
    TOK_MULT    shift, and go to state 130
    TOK_DIV     shift, and go to state 131
    TOK_MOD     shift, and go to state 132
    TOK_BITAND  shift, and go to state 133
    TOK_SHL     shift, and go to state 136
    TOK_SHR     shift, and go to state 137

    $default  reduce using rule 91 (expr)


state 169

   84 expr: expr . TOK_PLUS expr
   85     | expr . TOK_MINUS expr
   86     | expr . TOK_MULT expr
   87     | expr . TOK_DIV expr
   88     | expr . TOK_MOD expr
   90     | expr . TOK_BITAND expr
   91     | expr . TOK_BITOR expr
   92     | expr . TOK_BITXOR expr
   92     | expr TOK_BITXOR expr .
   93     | expr . TOK_SHR expr
   94     | expr . TOK_SHL expr
   95     | expr . TOK_GT expr
   96     | expr . TOK_LT expr
   97     | expr . TOK_GE expr
   98     | expr . TOK_LE expr
   99     | expr . TOK_EQ expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_OR expr

    TOK_PLUS    shift, and go to state 128
    TOK_MINUS   shift, and go to state 129
    TOK_MULT    shift, and go to state 130
    TOK_DIV     shift, and go to state 131
    TOK_MOD     shift, and go to state 132
    TOK_BITAND  shift, and go to state 133
    TOK_SHL     shift, and go to state 136
    TOK_SHR     shift, and go to state 137

    $default  reduce using rule 92 (expr)


state 170

   84 expr: expr . TOK_PLUS expr
   85     | expr . TOK_MINUS expr
   86     | expr . TOK_MULT expr
   87     | expr . TOK_DIV expr
   88     | expr . TOK_MOD expr
   90     | expr . TOK_BITAND expr
   91     | expr . TOK_BITOR expr
   92     | expr . TOK_BITXOR expr
   93     | expr . TOK_SHR expr
   94     | expr . TOK_SHL expr
   94     | expr TOK_SHL expr .
   95     | expr . TOK_GT expr
   96     | expr . TOK_LT expr
   97     | expr . TOK_GE expr
   98     | expr . TOK_LE expr
   99     | expr . TOK_EQ expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_OR expr

    TOK_PLUS   shift, and go to state 128
    TOK_MINUS  shift, and go to state 129
    TOK_MULT   shift, and go to state 130
    TOK_DIV    shift, and go to state 131
    TOK_MOD    shift, and go to state 132

    $default  reduce using rule 94 (expr)


state 171

   84 expr: expr . TOK_PLUS expr
   85     | expr . TOK_MINUS expr
   86     | expr . TOK_MULT expr
   87     | expr . TOK_DIV expr
   88     | expr . TOK_MOD expr
   90     | expr . TOK_BITAND expr
   91     | expr . TOK_BITOR expr
   92     | expr . TOK_BITXOR expr
   93     | expr . TOK_SHR expr
   93     | expr TOK_SHR expr .
   94     | expr . TOK_SHL expr
   95     | expr . TOK_GT expr
   96     | expr . TOK_LT expr
   97     | expr . TOK_GE expr
   98     | expr . TOK_LE expr
   99     | expr . TOK_EQ expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_OR expr

    TOK_PLUS   shift, and go to state 128
    TOK_MINUS  shift, and go to state 129
    TOK_MULT   shift, and go to state 130
    TOK_DIV    shift, and go to state 131
    TOK_MOD    shift, and go to state 132

    $default  reduce using rule 93 (expr)


state 172

   84 expr: expr . TOK_PLUS expr
   85     | expr . TOK_MINUS expr
   86     | expr . TOK_MULT expr
   87     | expr . TOK_DIV expr
   88     | expr . TOK_MOD expr
   90     | expr . TOK_BITAND expr
   91     | expr . TOK_BITOR expr
   92     | expr . TOK_BITXOR expr
   93     | expr . TOK_SHR expr
   94     | expr . TOK_SHL expr
   95     | expr . TOK_GT expr
   95     | expr TOK_GT expr .
   96     | expr . TOK_LT expr
   97     | expr . TOK_GE expr
   98     | expr . TOK_LE expr
   99     | expr . TOK_EQ expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_OR expr

    TOK_PLUS    shift, and go to state 128
    TOK_MINUS   shift, and go to state 129
    TOK_MULT    shift, and go to state 130
    TOK_DIV     shift, and go to state 131
    TOK_MOD     shift, and go to state 132
    TOK_BITAND  shift, and go to state 133
    TOK_BITOR   shift, and go to state 134
    TOK_BITXOR  shift, and go to state 135
    TOK_SHL     shift, and go to state 136
    TOK_SHR     shift, and go to state 137

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 95 (expr)


state 173

   84 expr: expr . TOK_PLUS expr
   85     | expr . TOK_MINUS expr
   86     | expr . TOK_MULT expr
   87     | expr . TOK_DIV expr
   88     | expr . TOK_MOD expr
   90     | expr . TOK_BITAND expr
   91     | expr . TOK_BITOR expr
   92     | expr . TOK_BITXOR expr
   93     | expr . TOK_SHR expr
   94     | expr . TOK_SHL expr
   95     | expr . TOK_GT expr
   96     | expr . TOK_LT expr
   96     | expr TOK_LT expr .
   97     | expr . TOK_GE expr
   98     | expr . TOK_LE expr
   99     | expr . TOK_EQ expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_OR expr

    TOK_PLUS    shift, and go to state 128
    TOK_MINUS   shift, and go to state 129
    TOK_MULT    shift, and go to state 130
    TOK_DIV     shift, and go to state 131
    TOK_MOD     shift, and go to state 132
    TOK_BITAND  shift, and go to state 133
    TOK_BITOR   shift, and go to state 134
    TOK_BITXOR  shift, and go to state 135
    TOK_SHL     shift, and go to state 136
    TOK_SHR     shift, and go to state 137

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 96 (expr)


state 174

   84 expr: expr . TOK_PLUS expr
   85     | expr . TOK_MINUS expr
   86     | expr . TOK_MULT expr
   87     | expr . TOK_DIV expr
   88     | expr . TOK_MOD expr
   90     | expr . TOK_BITAND expr
   91     | expr . TOK_BITOR expr
   92     | expr . TOK_BITXOR expr
   93     | expr . TOK_SHR expr
   94     | expr . TOK_SHL expr
   95     | expr . TOK_GT expr
   96     | expr . TOK_LT expr
   97     | expr . TOK_GE expr
   97     | expr TOK_GE expr .
   98     | expr . TOK_LE expr
   99     | expr . TOK_EQ expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_OR expr

    TOK_PLUS    shift, and go to state 128
    TOK_MINUS   shift, and go to state 129
    TOK_MULT    shift, and go to state 130
    TOK_DIV     shift, and go to state 131
    TOK_MOD     shift, and go to state 132
    TOK_BITAND  shift, and go to state 133
    TOK_BITOR   shift, and go to state 134
    TOK_BITXOR  shift, and go to state 135
    TOK_SHL     shift, and go to state 136
    TOK_SHR     shift, and go to state 137

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 97 (expr)


state 175

   84 expr: expr . TOK_PLUS expr
   85     | expr . TOK_MINUS expr
   86     | expr . TOK_MULT expr
   87     | expr . TOK_DIV expr
   88     | expr . TOK_MOD expr
   90     | expr . TOK_BITAND expr
   91     | expr . TOK_BITOR expr
   92     | expr . TOK_BITXOR expr
   93     | expr . TOK_SHR expr
   94     | expr . TOK_SHL expr
   95     | expr . TOK_GT expr
   96     | expr . TOK_LT expr
   97     | expr . TOK_GE expr
   98     | expr . TOK_LE expr
   98     | expr TOK_LE expr .
   99     | expr . TOK_EQ expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_OR expr

    TOK_PLUS    shift, and go to state 128
    TOK_MINUS   shift, and go to state 129
    TOK_MULT    shift, and go to state 130
    TOK_DIV     shift, and go to state 131
    TOK_MOD     shift, and go to state 132
    TOK_BITAND  shift, and go to state 133
    TOK_BITOR   shift, and go to state 134
    TOK_BITXOR  shift, and go to state 135
    TOK_SHL     shift, and go to state 136
    TOK_SHR     shift, and go to state 137

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 98 (expr)


state 176

   84 expr: expr . TOK_PLUS expr
   85     | expr . TOK_MINUS expr
   86     | expr . TOK_MULT expr
   87     | expr . TOK_DIV expr
   88     | expr . TOK_MOD expr
   90     | expr . TOK_BITAND expr
   91     | expr . TOK_BITOR expr
   92     | expr . TOK_BITXOR expr
   93     | expr . TOK_SHR expr
   94     | expr . TOK_SHL expr
   95     | expr . TOK_GT expr
   96     | expr . TOK_LT expr
   97     | expr . TOK_GE expr
   98     | expr . TOK_LE expr
   99     | expr . TOK_EQ expr
   99     | expr TOK_EQ expr .
  100     | expr . TOK_NE expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_OR expr

    TOK_PLUS    shift, and go to state 128
    TOK_MINUS   shift, and go to state 129
    TOK_MULT    shift, and go to state 130
    TOK_DIV     shift, and go to state 131
    TOK_MOD     shift, and go to state 132
    TOK_BITAND  shift, and go to state 133
    TOK_BITOR   shift, and go to state 134
    TOK_BITXOR  shift, and go to state 135
    TOK_SHL     shift, and go to state 136
    TOK_SHR     shift, and go to state 137

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 99 (expr)


state 177

   84 expr: expr . TOK_PLUS expr
   85     | expr . TOK_MINUS expr
   86     | expr . TOK_MULT expr
   87     | expr . TOK_DIV expr
   88     | expr . TOK_MOD expr
   90     | expr . TOK_BITAND expr
   91     | expr . TOK_BITOR expr
   92     | expr . TOK_BITXOR expr
   93     | expr . TOK_SHR expr
   94     | expr . TOK_SHL expr
   95     | expr . TOK_GT expr
   96     | expr . TOK_LT expr
   97     | expr . TOK_GE expr
   98     | expr . TOK_LE expr
   99     | expr . TOK_EQ expr
  100     | expr . TOK_NE expr
  100     | expr TOK_NE expr .
  101     | expr . TOK_AND expr
  102     | expr . TOK_OR expr

    TOK_PLUS    shift, and go to state 128
    TOK_MINUS   shift, and go to state 129
    TOK_MULT    shift, and go to state 130
    TOK_DIV     shift, and go to state 131
    TOK_MOD     shift, and go to state 132
    TOK_BITAND  shift, and go to state 133
    TOK_BITOR   shift, and go to state 134
    TOK_BITXOR  shift, and go to state 135
    TOK_SHL     shift, and go to state 136
    TOK_SHR     shift, and go to state 137

    TOK_GT  error (nonassociative)
    TOK_LT  error (nonassociative)
    TOK_GE  error (nonassociative)
    TOK_LE  error (nonassociative)
    TOK_EQ  error (nonassociative)
    TOK_NE  error (nonassociative)

    $default  reduce using rule 100 (expr)


state 178

   84 expr: expr . TOK_PLUS expr
   85     | expr . TOK_MINUS expr
   86     | expr . TOK_MULT expr
   87     | expr . TOK_DIV expr
   88     | expr . TOK_MOD expr
   90     | expr . TOK_BITAND expr
   91     | expr . TOK_BITOR expr
   92     | expr . TOK_BITXOR expr
   93     | expr . TOK_SHR expr
   94     | expr . TOK_SHL expr
   95     | expr . TOK_GT expr
   96     | expr . TOK_LT expr
   97     | expr . TOK_GE expr
   98     | expr . TOK_LE expr
   99     | expr . TOK_EQ expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_AND expr
  101     | expr TOK_AND expr .
  102     | expr . TOK_OR expr

    TOK_PLUS    shift, and go to state 128
    TOK_MINUS   shift, and go to state 129
    TOK_MULT    shift, and go to state 130
    TOK_DIV     shift, and go to state 131
    TOK_MOD     shift, and go to state 132
    TOK_BITAND  shift, and go to state 133
    TOK_BITOR   shift, and go to state 134
    TOK_BITXOR  shift, and go to state 135
    TOK_SHL     shift, and go to state 136
    TOK_SHR     shift, and go to state 137
    TOK_GT      shift, and go to state 138
    TOK_LT      shift, and go to state 139
    TOK_GE      shift, and go to state 140
    TOK_LE      shift, and go to state 141
    TOK_EQ      shift, and go to state 142
    TOK_NE      shift, and go to state 143

    $default  reduce using rule 101 (expr)


state 179

   84 expr: expr . TOK_PLUS expr
   85     | expr . TOK_MINUS expr
   86     | expr . TOK_MULT expr
   87     | expr . TOK_DIV expr
   88     | expr . TOK_MOD expr
   90     | expr . TOK_BITAND expr
   91     | expr . TOK_BITOR expr
   92     | expr . TOK_BITXOR expr
   93     | expr . TOK_SHR expr
   94     | expr . TOK_SHL expr
   95     | expr . TOK_GT expr
   96     | expr . TOK_LT expr
   97     | expr . TOK_GE expr
   98     | expr . TOK_LE expr
   99     | expr . TOK_EQ expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_OR expr
  102     | expr TOK_OR expr .

    TOK_PLUS    shift, and go to state 128
    TOK_MINUS   shift, and go to state 129
    TOK_MULT    shift, and go to state 130
    TOK_DIV     shift, and go to state 131
    TOK_MOD     shift, and go to state 132
    TOK_BITAND  shift, and go to state 133
    TOK_BITOR   shift, and go to state 134
    TOK_BITXOR  shift, and go to state 135
    TOK_SHL     shift, and go to state 136
    TOK_SHR     shift, and go to state 137
    TOK_GT      shift, and go to state 138
    TOK_LT      shift, and go to state 139
    TOK_GE      shift, and go to state 140
    TOK_LE      shift, and go to state 141
    TOK_EQ      shift, and go to state 142
    TOK_NE      shift, and go to state 143
    TOK_AND     shift, and go to state 144

    $default  reduce using rule 102 (expr)


state 180

   16 func_body: TOK_LBRACE var_decl_star . statement_plus TOK_RBRACE
   20 var_decl_star: var_decl_star . var_decl

    TOK_LBRACE    shift, and go to state 70
    TOK_IF        shift, and go to state 71
    TOK_RETURN    shift, and go to state 72
    TOK_VOID      shift, and go to state 9
    TOK_STRING    shift, and go to state 10
    TOK_INT       shift, and go to state 11
    TOK_UNSIGNED  shift, and go to state 12
    TOK_BOOL      shift, and go to state 13
    TOK_BYTE      shift, and go to state 14
    TOK_DOUBLE    shift, and go to state 15
    TOK_IDENT     shift, and go to state 184
    TOK_WHILE     shift, and go to state 74
    TOK_BREAK     shift, and go to state 75

    $default  reduce using rule 55 (empty_statement)

    statement_plus            go to state 185
    var_decl                  go to state 186
    var_decl1                 go to state 23
    statement                 go to state 120
    if_statement              go to state 77
    empty_statement           go to state 78
    return_statement          go to state 79
    while_statement           go to state 80
    break_statement           go to state 81
    comp_statement            go to state 82
    enter_compound_statement  go to state 83
    type                      go to state 187
    type_name                 go to state 31
    base_type                 go to state 32
    btype                     go to state 33
    ref_expr                  go to state 84
    assignment                go to state 85
    func_invocation           go to state 86


state 181

   54 if_statement: TOK_IF expr statement TOK_ELSE . statement

    TOK_LBRACE  shift, and go to state 70
    TOK_IF      shift, and go to state 71
    TOK_RETURN  shift, and go to state 72
    TOK_IDENT   shift, and go to state 73
    TOK_WHILE   shift, and go to state 74
    TOK_BREAK   shift, and go to state 75

    $default  reduce using rule 55 (empty_statement)

    statement                 go to state 188
    if_statement              go to state 77
    empty_statement           go to state 78
    return_statement          go to state 79
    while_statement           go to state 80
    break_statement           go to state 81
    comp_statement            go to state 82
    enter_compound_statement  go to state 83
    ref_expr                  go to state 84
    assignment                go to state 85
    func_invocation           go to state 86


state 182

  112 func_invocation: TOK_IDENT TOK_LPAREN expr_maybe_list TOK_RPAREN .

    $default  reduce using rule 112 (func_invocation)


state 183

  116 expr_list: expr_list TOK_COMMA . expr

    TOK_MINUS      shift, and go to state 87
    TOK_BITNOT     shift, and go to state 88
    TOK_NOT        shift, and go to state 89
    TOK_LPAREN     shift, and go to state 90
    TOK_UINTNUM    shift, and go to state 91
    TOK_DOUBLENUM  shift, and go to state 92
    TOK_STRCONST   shift, and go to state 93
    TOK_TRUE       shift, and go to state 94
    TOK_FALSE      shift, and go to state 95
    TOK_IDENT      shift, and go to state 73

    expr             go to state 189
    literal          go to state 97
    ref_expr         go to state 98
    assignment       go to state 99
    func_invocation  go to state 100


state 184

   70 type_name: TOK_IDENT .
  110 ref_expr: TOK_IDENT .
  112 func_invocation: TOK_IDENT . TOK_LPAREN expr_maybe_list TOK_RPAREN

    TOK_LPAREN  shift, and go to state 112

    TOK_ASSIGN  reduce using rule 110 (ref_expr)
    $default    reduce using rule 70 (type_name)


state 185

   16 func_body: TOK_LBRACE var_decl_star statement_plus . TOK_RBRACE
   18 statement_plus: statement_plus . statement

    TOK_LBRACE  shift, and go to state 70
    TOK_RBRACE  shift, and go to state 190
    TOK_IF      shift, and go to state 71
    TOK_RETURN  shift, and go to state 72
    TOK_IDENT   shift, and go to state 73
    TOK_WHILE   shift, and go to state 74
    TOK_BREAK   shift, and go to state 75

    $default  reduce using rule 55 (empty_statement)

    statement                 go to state 158
    if_statement              go to state 77
    empty_statement           go to state 78
    return_statement          go to state 79
    while_statement           go to state 80
    break_statement           go to state 81
    comp_statement            go to state 82
    enter_compound_statement  go to state 83
    ref_expr                  go to state 84
    assignment                go to state 85
    func_invocation           go to state 86


state 186

   20 var_decl_star: var_decl_star var_decl .

    $default  reduce using rule 20 (var_decl_star)


state 187

   23 var_decl1: type . TOK_IDENT var_pos_assignment

    TOK_IDENT  shift, and go to state 191


state 188

   54 if_statement: TOK_IF expr statement TOK_ELSE statement .

    $default  reduce using rule 54 (if_statement)


state 189

   84 expr: expr . TOK_PLUS expr
   85     | expr . TOK_MINUS expr
   86     | expr . TOK_MULT expr
   87     | expr . TOK_DIV expr
   88     | expr . TOK_MOD expr
   90     | expr . TOK_BITAND expr
   91     | expr . TOK_BITOR expr
   92     | expr . TOK_BITXOR expr
   93     | expr . TOK_SHR expr
   94     | expr . TOK_SHL expr
   95     | expr . TOK_GT expr
   96     | expr . TOK_LT expr
   97     | expr . TOK_GE expr
   98     | expr . TOK_LE expr
   99     | expr . TOK_EQ expr
  100     | expr . TOK_NE expr
  101     | expr . TOK_AND expr
  102     | expr . TOK_OR expr
  116 expr_list: expr_list TOK_COMMA expr .

    TOK_PLUS    shift, and go to state 128
    TOK_MINUS   shift, and go to state 129
    TOK_MULT    shift, and go to state 130
    TOK_DIV     shift, and go to state 131
    TOK_MOD     shift, and go to state 132
    TOK_BITAND  shift, and go to state 133
    TOK_BITOR   shift, and go to state 134
    TOK_BITXOR  shift, and go to state 135
    TOK_SHL     shift, and go to state 136
    TOK_SHR     shift, and go to state 137
    TOK_GT      shift, and go to state 138
    TOK_LT      shift, and go to state 139
    TOK_GE      shift, and go to state 140
    TOK_LE      shift, and go to state 141
    TOK_EQ      shift, and go to state 142
    TOK_NE      shift, and go to state 143
    TOK_AND     shift, and go to state 144
    TOK_OR      shift, and go to state 145

    $default  reduce using rule 116 (expr_list)


state 190

   16 func_body: TOK_LBRACE var_decl_star statement_plus TOK_RBRACE .

    $default  reduce using rule 16 (func_body)


state 191

   23 var_decl1: type TOK_IDENT . var_pos_assignment

    TOK_ASSIGN  shift, and go to state 101

    $default  reduce using rule 25 (var_pos_assignment)

    var_pos_assignment  go to state 102
