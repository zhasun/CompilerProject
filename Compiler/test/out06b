Finished parsing, here is the AST

  class CString;
  string get(class CString c);
  class ArgV;
  class pid_t;
  int getpid_t(class pid_t t);
  class SchedParamP;
  class StatP;
  class NewStatP;
  int logMessage(string x);
  int logMessageInt(string x, int y);
  int getpid();
  int isChild(class pid_t a);
  event open(class CString a1, int a2, unsigned int a3);
  event close(int a1);
  event lstat(class CString a1, class NewStatP a2);
  event execve;
  event fork;
  event clone;
  event unlink(class CString a1);
  event kill(class pid_t a1, int a2);
  event ptrace(class pid_t a1, int a2, int a3, int a4);
  event sched_setscheduler(class pid_t a1, int a2, class SchedParamP a3);
  event umask(int a1);
  event write(int a1, class CString a2, int a3);
  event chmod(class CString a1, unsigned int a2);
  event truncate(class CString a1, int a2);
  event sysinfo(int a1);
  event sched_setparam(class pid_t a1, int a2);
  event setpriority(class pid_t a1, int a2, class pid_t a3);
  int tmp;
  int i = 2;
  int j = 3;
  int k = 4;
  double f = 3.3;
  int y;
  string state_var;

  ((((((kill(class pid_t a1, int a2)|((getpid_t(a1)!=getpid()&&getpid_t(a1)!=0)&&tmp=(a2&&y=a2))) \/ (ptrace(class pid_t b1, int b2, int b3, int b4))) \/ (sched_setscheduler(class pid_t c1, int c2, class SchedParamP c3)|((getpid_t(c1)!=getpid()&&getpid_t(c1)!=0)&&isChild(c1)!=0))) \/ (sched_setparam(class pid_t d1, int d2)|getpid_t(d1)!=getpid())) \/ (setpriority(class pid_t e1, int e2, class pid_t e3)|((getpid_t(e1)!=getpid()&&e2!=0)&&isChild(e1)!=0))):(((execve()) \/ (clone())) \/ (fork())))-->  {
    logMessage("proc_ops: testing abstract event declarations");
  };
  ;;
  ((((((open(class CString file, int flags, unsigned int mode))**):((any)**)):(open(class CString file1, int flags1, unsigned int mode1)|state_var=get(file1))):(!(close(int fd)))):(unlink(class CString path)|state_var==get(path)))-->  {
    logMessage("unlink path
");
  };
  ;;
  (((((((((open(class CString file, int flags, unsigned int mode)) \/ (close(int fd))) \/ (unlink(class CString file1))) \/ (chmod(class CString file2, unsigned int mode2))) \/ (truncate(class CString file3, int len)))**):(unlink(class CString file7))):(((write(int b1, class CString b2, int b3)) \/ (umask(int c1))) \/ (sysinfo(int d1)))):(open(class CString file4, int flags4, unsigned int mode4)))-->  {
    logMessageInt("simple pattern 3, %d", mode);
  };
  ;;
  